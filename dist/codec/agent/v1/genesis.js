"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const agent_1 = require("./agent");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "agent.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        innerValues: undefined,
        models: [],
        agents: [],
        sessions: [],
        vrfSeeds: [],
    };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            agent_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.innerValues !== undefined) {
            agent_1.InnerValues.encode(message.innerValues, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.models) {
            agent_1.Model.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.agents) {
            agent_1.InferenceAgent.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.sessions) {
            agent_1.Session.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.vrfSeeds) {
            agent_1.VrfSeed.encode(v, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = agent_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.innerValues = agent_1.InnerValues.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.models.push(agent_1.Model.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.agents.push(agent_1.InferenceAgent.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.sessions.push(agent_1.Session.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.vrfSeeds.push(agent_1.VrfSeed.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? agent_1.Params.fromJSON(object.params) : undefined,
            innerValues: isSet(object.innerValues)
                ? agent_1.InnerValues.fromJSON(object.innerValues)
                : undefined,
            models: Array.isArray(object?.models)
                ? object.models.map((e) => agent_1.Model.fromJSON(e))
                : [],
            agents: Array.isArray(object?.agents)
                ? object.agents.map((e) => agent_1.InferenceAgent.fromJSON(e))
                : [],
            sessions: Array.isArray(object?.sessions)
                ? object.sessions.map((e) => agent_1.Session.fromJSON(e))
                : [],
            vrfSeeds: Array.isArray(object?.vrfSeeds)
                ? object.vrfSeeds.map((e) => agent_1.VrfSeed.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? agent_1.Params.toJSON(message.params) : undefined);
        message.innerValues !== undefined &&
            (obj.innerValues = message.innerValues
                ? agent_1.InnerValues.toJSON(message.innerValues)
                : undefined);
        if (message.models) {
            obj.models = message.models.map((e) => (e ? agent_1.Model.toJSON(e) : undefined));
        }
        else {
            obj.models = [];
        }
        if (message.agents) {
            obj.agents = message.agents.map((e) => e ? agent_1.InferenceAgent.toJSON(e) : undefined);
        }
        else {
            obj.agents = [];
        }
        if (message.sessions) {
            obj.sessions = message.sessions.map((e) => e ? agent_1.Session.toJSON(e) : undefined);
        }
        else {
            obj.sessions = [];
        }
        if (message.vrfSeeds) {
            obj.vrfSeeds = message.vrfSeeds.map((e) => e ? agent_1.VrfSeed.toJSON(e) : undefined);
        }
        else {
            obj.vrfSeeds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? agent_1.Params.fromPartial(object.params)
                : undefined;
        message.innerValues =
            object.innerValues !== undefined && object.innerValues !== null
                ? agent_1.InnerValues.fromPartial(object.innerValues)
                : undefined;
        message.models = object.models?.map((e) => agent_1.Model.fromPartial(e)) || [];
        message.agents =
            object.agents?.map((e) => agent_1.InferenceAgent.fromPartial(e)) || [];
        message.sessions =
            object.sessions?.map((e) => agent_1.Session.fromPartial(e)) || [];
        message.vrfSeeds =
            object.vrfSeeds?.map((e) => agent_1.VrfSeed.fromPartial(e)) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=data:application/json;base64,